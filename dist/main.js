(()=>{"use strict";var n={426:(n,e,r)=>{r.d(e,{Z:()=>i});var t=r(537),A=r.n(t),o=r(645),a=r.n(o)()(A());a.push([n.id,"* {\n  margin: 0px;\n  padding: 0px;\n  box-sizing: border-box;\n  font-size: 62.5%;\n  font-family: 'Montserrat', sans-serif;\n  letter-spacing: 2px;\n  --primary-color: black;\n}\n\ninput,\nbutton,\nh2,\nli {\n  all: unset;\n  display: flex;\n}\n\nheader {\n  display: flex;\n  align-items: center;\n  height: 10vh;\n  background-color: var(--primary-color);\n}\n\n.logo {\n  font-size: 2rem;\n  color: white;\n  margin-left: 20px;\n  letter-spacing: 5px;\n}\n\n.grid {\n  display: grid;\n  grid-template: auto / repeat(3, 1fr);\n  gap: 10px;\n  margin: 10px;\n}\n\n.project {\n  display: grid;\n  grid-template: 30px repeat(2, auto) / 1fr;\n  height: auto;\n  max-width: 100%;\n  border: 1px solid rgba(211, 211, 211, 0.5);\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 12px;\n}\n\n.project:hover {\n  border-color: black;\n}\n\nh1 {\n  display: flex;\n  align-items: center;\n  font-size: 1.5rem;\n  font-weight: 100;\n  padding: 10px;\n}\n\np {\n  display: flex;\n  align-items: center;\n  padding-left: 10px;\n  font-size: 1.5rem;\n  font-weight: 100;\n}\n\n.task {\n  display: grid;\n  align-items: center;\n  grid-template: auto 1fr / auto auto 8fr 1fr;\n  font-size: 1.5rem;\n  padding: 10px;\n}\n\n.task:nth-child(even) {\n  background-color: rgba(211, 211, 211, 0.15);\n}\n\n.expand {\n  display: flex;\n  justify-content: end;\n  font-size: 1.25rem;\n  cursor: pointer;\n}\n\n.expand:hover {\n  color: grey;\n}\n\n.task-details {\n  display: none;\n  grid-area: 2 / 3 / 3 / 4;\n  align-items: center;\n  grid-template: repeat(3, auto) / auto 1fr;\n  margin: 10px 10px 0px 10px;\n  font-size: 1.25rem;\n}\n\n.task-details p {\n  font-weight: 100;\n  margin: 5px;\n}\n\nh2 {\n  display: flex;\n  justify-content: flex-end;\n  font-weight: bold;\n  margin: 5px;\n}\n\n.show {\n  display: grid;\n}\n\n.priority {\n  width: 17px;\n  height: 17px;\n  border-radius: 50%;\n  margin-left: 10px;\n  cursor: pointer;\n  border: 2px solid;\n}\n\n.green {\n  background-color: rgba(132, 204, 22, 0.5);\n  border-color: rgba(132, 204, 22, 1);\n}\n\n.orange {\n  background-color: rgba(249, 116, 22, 0.5);\n  border-color: rgba(249, 116, 22, 1);\n}\n\n.red {\n  background-color: rgba(239, 68, 68, 0.5);\n  border-color: rgba(239, 68, 68, 1);\n}\n\n/* Checkmark */\n\n.checkbox-wrapper {\n  display: flex;\n  align-items: center;\n}\n\n.checkbox-wrapper input[type='checkbox'] {\n  display: none;\n  visibility: hidden;\n}\n\n.checkbox-wrapper label {\n  display: inline-block;\n}\n\n.checkbox-wrapper .check {\n  cursor: pointer;\n  position: relative;\n  margin: auto;\n  width: 18px;\n  height: 18px;\n  -webkit-tap-highlight-color: transparent;\n  transform: translate3d(0, 0, 0);\n}\n.checkbox-wrapper .check:before {\n  content: '';\n  position: absolute;\n  top: -15px;\n  left: -15px;\n  width: 48px;\n  height: 48px;\n  border-radius: 50%;\n  background: rgba(34, 50, 84, 0.03);\n  opacity: 0;\n  transition: opacity 0.2s ease;\n}\n.checkbox-wrapper .check svg {\n  position: relative;\n  z-index: 1;\n  fill: none;\n  stroke-linecap: round;\n  stroke-linejoin: round;\n  stroke: #c8ccd4;\n  stroke-width: 1.5;\n  transform: translate3d(0, 0, 0);\n  transition: all 0.2s ease;\n}\n.checkbox-wrapper .check svg path {\n  stroke-dasharray: 60;\n  stroke-dashoffset: 0;\n}\n.checkbox-wrapper .check svg polyline {\n  stroke-dasharray: 22;\n  stroke-dashoffset: 66;\n}\n.checkbox-wrapper .check:hover:before {\n  opacity: 1;\n}\n.checkbox-wrapper .check:hover svg {\n  stroke: rgb(33, 134, 33);\n}\n.checkbox-wrapper input[type='checkbox']:checked + .check svg {\n  stroke: rgb(33, 134, 33);\n}\n.checkbox-wrapper input[type='checkbox']:checked + .check svg path {\n  stroke-dashoffset: 60;\n  transition: all 0.3s linear;\n}\n.checkbox-wrapper input[type='checkbox']:checked + .check svg polyline {\n  stroke-dashoffset: 42;\n  transition: all 0.2s linear;\n  transition-delay: 0.15s;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,YAAY;EACZ,sBAAsB;EACtB,gBAAgB;EAChB,qCAAqC;EACrC,mBAAmB;EACnB,sBAAsB;AACxB;;AAEA;;;;EAIE,UAAU;EACV,aAAa;AACf;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,YAAY;EACZ,sCAAsC;AACxC;;AAEA;EACE,eAAe;EACf,YAAY;EACZ,iBAAiB;EACjB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,oCAAoC;EACpC,SAAS;EACT,YAAY;AACd;;AAEA;EACE,aAAa;EACb,yCAAyC;EACzC,YAAY;EACZ,eAAe;EACf,0CAA0C;EAC1C,2CAA2C;AAC7C;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,iBAAiB;EACjB,gBAAgB;EAChB,aAAa;AACf;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,kBAAkB;EAClB,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,2CAA2C;EAC3C,iBAAiB;EACjB,aAAa;AACf;;AAEA;EACE,2CAA2C;AAC7C;;AAEA;EACE,aAAa;EACb,oBAAoB;EACpB,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,aAAa;EACb,wBAAwB;EACxB,mBAAmB;EACnB,yCAAyC;EACzC,0BAA0B;EAC1B,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;EAChB,WAAW;AACb;;AAEA;EACE,aAAa;EACb,yBAAyB;EACzB,iBAAiB;EACjB,WAAW;AACb;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,iBAAiB;EACjB,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,yCAAyC;EACzC,mCAAmC;AACrC;;AAEA;EACE,yCAAyC;EACzC,mCAAmC;AACrC;;AAEA;EACE,wCAAwC;EACxC,kCAAkC;AACpC;;AAEA,cAAc;;AAEd;EACE,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,YAAY;EACZ,WAAW;EACX,YAAY;EACZ,wCAAwC;EACxC,+BAA+B;AACjC;AACA;EACE,WAAW;EACX,kBAAkB;EAClB,UAAU;EACV,WAAW;EACX,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,kCAAkC;EAClC,UAAU;EACV,6BAA6B;AAC/B;AACA;EACE,kBAAkB;EAClB,UAAU;EACV,UAAU;EACV,qBAAqB;EACrB,sBAAsB;EACtB,eAAe;EACf,iBAAiB;EACjB,+BAA+B;EAC/B,yBAAyB;AAC3B;AACA;EACE,oBAAoB;EACpB,oBAAoB;AACtB;AACA;EACE,oBAAoB;EACpB,qBAAqB;AACvB;AACA;EACE,UAAU;AACZ;AACA;EACE,wBAAwB;AAC1B;AACA;EACE,wBAAwB;AAC1B;AACA;EACE,qBAAqB;EACrB,2BAA2B;AAC7B;AACA;EACE,qBAAqB;EACrB,2BAA2B;EAC3B,uBAAuB;AACzB",sourcesContent:["* {\n  margin: 0px;\n  padding: 0px;\n  box-sizing: border-box;\n  font-size: 62.5%;\n  font-family: 'Montserrat', sans-serif;\n  letter-spacing: 2px;\n  --primary-color: black;\n}\n\ninput,\nbutton,\nh2,\nli {\n  all: unset;\n  display: flex;\n}\n\nheader {\n  display: flex;\n  align-items: center;\n  height: 10vh;\n  background-color: var(--primary-color);\n}\n\n.logo {\n  font-size: 2rem;\n  color: white;\n  margin-left: 20px;\n  letter-spacing: 5px;\n}\n\n.grid {\n  display: grid;\n  grid-template: auto / repeat(3, 1fr);\n  gap: 10px;\n  margin: 10px;\n}\n\n.project {\n  display: grid;\n  grid-template: 30px repeat(2, auto) / 1fr;\n  height: auto;\n  max-width: 100%;\n  border: 1px solid rgba(211, 211, 211, 0.5);\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 12px;\n}\n\n.project:hover {\n  border-color: black;\n}\n\nh1 {\n  display: flex;\n  align-items: center;\n  font-size: 1.5rem;\n  font-weight: 100;\n  padding: 10px;\n}\n\np {\n  display: flex;\n  align-items: center;\n  padding-left: 10px;\n  font-size: 1.5rem;\n  font-weight: 100;\n}\n\n.task {\n  display: grid;\n  align-items: center;\n  grid-template: auto 1fr / auto auto 8fr 1fr;\n  font-size: 1.5rem;\n  padding: 10px;\n}\n\n.task:nth-child(even) {\n  background-color: rgba(211, 211, 211, 0.15);\n}\n\n.expand {\n  display: flex;\n  justify-content: end;\n  font-size: 1.25rem;\n  cursor: pointer;\n}\n\n.expand:hover {\n  color: grey;\n}\n\n.task-details {\n  display: none;\n  grid-area: 2 / 3 / 3 / 4;\n  align-items: center;\n  grid-template: repeat(3, auto) / auto 1fr;\n  margin: 10px 10px 0px 10px;\n  font-size: 1.25rem;\n}\n\n.task-details p {\n  font-weight: 100;\n  margin: 5px;\n}\n\nh2 {\n  display: flex;\n  justify-content: flex-end;\n  font-weight: bold;\n  margin: 5px;\n}\n\n.show {\n  display: grid;\n}\n\n.priority {\n  width: 17px;\n  height: 17px;\n  border-radius: 50%;\n  margin-left: 10px;\n  cursor: pointer;\n  border: 2px solid;\n}\n\n.green {\n  background-color: rgba(132, 204, 22, 0.5);\n  border-color: rgba(132, 204, 22, 1);\n}\n\n.orange {\n  background-color: rgba(249, 116, 22, 0.5);\n  border-color: rgba(249, 116, 22, 1);\n}\n\n.red {\n  background-color: rgba(239, 68, 68, 0.5);\n  border-color: rgba(239, 68, 68, 1);\n}\n\n/* Checkmark */\n\n.checkbox-wrapper {\n  display: flex;\n  align-items: center;\n}\n\n.checkbox-wrapper input[type='checkbox'] {\n  display: none;\n  visibility: hidden;\n}\n\n.checkbox-wrapper label {\n  display: inline-block;\n}\n\n.checkbox-wrapper .check {\n  cursor: pointer;\n  position: relative;\n  margin: auto;\n  width: 18px;\n  height: 18px;\n  -webkit-tap-highlight-color: transparent;\n  transform: translate3d(0, 0, 0);\n}\n.checkbox-wrapper .check:before {\n  content: '';\n  position: absolute;\n  top: -15px;\n  left: -15px;\n  width: 48px;\n  height: 48px;\n  border-radius: 50%;\n  background: rgba(34, 50, 84, 0.03);\n  opacity: 0;\n  transition: opacity 0.2s ease;\n}\n.checkbox-wrapper .check svg {\n  position: relative;\n  z-index: 1;\n  fill: none;\n  stroke-linecap: round;\n  stroke-linejoin: round;\n  stroke: #c8ccd4;\n  stroke-width: 1.5;\n  transform: translate3d(0, 0, 0);\n  transition: all 0.2s ease;\n}\n.checkbox-wrapper .check svg path {\n  stroke-dasharray: 60;\n  stroke-dashoffset: 0;\n}\n.checkbox-wrapper .check svg polyline {\n  stroke-dasharray: 22;\n  stroke-dashoffset: 66;\n}\n.checkbox-wrapper .check:hover:before {\n  opacity: 1;\n}\n.checkbox-wrapper .check:hover svg {\n  stroke: rgb(33, 134, 33);\n}\n.checkbox-wrapper input[type='checkbox']:checked + .check svg {\n  stroke: rgb(33, 134, 33);\n}\n.checkbox-wrapper input[type='checkbox']:checked + .check svg path {\n  stroke-dashoffset: 60;\n  transition: all 0.3s linear;\n}\n.checkbox-wrapper input[type='checkbox']:checked + .check svg polyline {\n  stroke-dashoffset: 42;\n  transition: all 0.2s linear;\n  transition-delay: 0.15s;\n}\n"],sourceRoot:""}]);const i=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var r="",t=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),t&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=n(e),t&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(n,r,t,A,o){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(t)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(a[s]=!0)}for(var c=0;c<n.length;c++){var p=[].concat(n[c]);t&&a[p[0]]||(void 0!==o&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=o),r&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=r):p[2]=r),A&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=A):p[4]="".concat(A)),e.push(p))}},e}},537:n=>{n.exports=function(n){var e=n[1],r=n[3];if(!r)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),A="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),o="/*# ".concat(A," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function r(n){for(var r=-1,t=0;t<e.length;t++)if(e[t].identifier===n){r=t;break}return r}function t(n,t){for(var o={},a=[],i=0;i<n.length;i++){var s=n[i],c=t.base?s[0]+t.base:s[0],p=o[c]||0,l="".concat(c," ").concat(p);o[c]=p+1;var d=r(l),C={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==d)e[d].references++,e[d].updater(C);else{var h=A(C,t);t.byIndex=i,e.splice(i,0,{identifier:l,updater:h,references:1})}a.push(l)}return a}function A(n,e){var r=e.domAPI(e);return r.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;r.update(n=e)}else r.remove()}}n.exports=function(n,A){var o=t(n=n||[],A=A||{});return function(n){n=n||[];for(var a=0;a<o.length;a++){var i=r(o[a]);e[i].references--}for(var s=t(n,A),c=0;c<o.length;c++){var p=r(o[c]);0===e[p].references&&(e[p].updater(),e.splice(p,1))}o=s}}},569:n=>{var e={};n.exports=function(n,r){var t=function(n){if(void 0===e[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}e[n]=r}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,r)=>{n.exports=function(n){var e=r.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(r){!function(n,e,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var A=void 0!==r.layer;A&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,A&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var o=r.sourceMap;o&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(t,n,e.options)}(e,n,r)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function r(t){var A=e[t];if(void 0!==A)return A.exports;var o=e[t]={id:t,exports:{}};return n[t](o,o.exports,r),o.exports}r.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return r.d(e,{a:e}),e},r.d=(n,e)=>{for(var t in e)r.o(e,t)&&!r.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},r.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),r.nc=void 0,(()=>{var n=r(379),e=r.n(n),t=r(795),A=r.n(t),o=r(569),a=r.n(o),i=r(565),s=r.n(i),c=r(216),p=r.n(c),l=r(589),d=r.n(l),C=r(426),h={};h.styleTagTransform=d(),h.setAttributes=s(),h.insert=a().bind(null,"head"),h.domAPI=A(),h.insertStyleElement=p(),e()(C.Z,h),C.Z&&C.Z.locals&&C.Z.locals,document.querySelectorAll(".expand").forEach((function(n){n.addEventListener("click",(function(){n.nextElementSibling.classList.toggle("show")}))}));const E=new class{constructor(n){this._title=n,this._projectTasks=[]}get title(){return this._title}set title(n){this._title=n}get projectTasks(){return this._projectTasks}set projectTasks(n){this._projectTasks.push(n)}}("ProjectTest1");E.projectTasks=3,E.projectTasks=4,console.log(E.projectTasks)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,